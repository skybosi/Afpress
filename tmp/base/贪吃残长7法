一种对二模式处理法的改进版：

该方法摒弃了二模式中的不能让残长7的字符为开头的前提！引进残长7开头，但设法抑制此种情况的发生，让尽可能多的残长7出现在其他的开头的序列中，从而最大可能的弱化残长7的放大效果，即使是以残长7开头也要尽可能多的吞噬相近的残长7，达到最终只增大一位的效果！所以，这种方法我把它命名为：贪吃残长7法。
但由于操作过程中，对残长6的情况也毫不放过，而残长6的字符特殊，不管是模式1或2，它都有不会增大的稳定性，再加上它相对于其他残长更能吸引残长7，所以残长6也会被大量贪吃！最终效果是贪吃残长6，7。所以叫：贪吃法。

锁机制处理：由于残长7的出现且占比过半，而残长7的效果会导致压缩过程中的增加一位，为了弱化这种不利的情况！特地引入一种弱化模式2，起作用时会导致所有残长的字符能保持8位原长(见模式2)。此外如果无法避免的以残长开头，则以模式1标记！
所以，为了避免这样的可恶开头，设法尽可能的在其他残长开头的情况下尽可能多吃掉残长7，减少残长开头的概率！
经测试，任何残长后接残长7的可能性与后接其他残长(而且随着残长的变小，占比变小，也就是说残长67，57，47等占比依次减小)的可能性之和差不多！也就是说以非残长7开头的字符后接残长7的可能性占一半，后接残长6的也有1/4，如果在后接残长6和7时就开启锁机制，而且尽可能多的吞噬残长6和7，而在首次遇到小于残长6时，处理完该字符后立即关闭锁机制！

由于在以非残长7开头且锁机制开启到关闭区间，只有残长6，7；经计算此区间内所有字符不会增加长度！所以，尽可能多的吞噬残长7和6，让残长7开头这种尽可能少的出现！这样可以有效的削弱残长7开头的放大效果！

此外，经程序测试得到，连续的残长7分布基本去下：(n)，连续n个残长7字符
7(1)+7(2)+7(3)+7(4)+7(5)≈95% +

1，残长7(1)，可由非残长7开头的设法吞噬！
2，残长7(2)，7(3),7(4),7(5)甚至更长，可由1种情况贪婪吞噬部分！
3，剩余的7(2)，7(3),7(4),7(5)甚至更长，通过残长7开头处理到整条只扩大1位长度！
4，如果设法处理掉3种情况，一切都会好

模式1：(主模式，不完全缩化模式)
9	7	11
8	6	10
7	5	01
7	4	001
7	3	0001
7	2	00001
7	1	000001
7	0	000000

模式2：(辅模式，弱化模式)
8	7	1
8	6	01
8	5	001
8	4	0001
8	3	00001
8	2	000001
8	1	0000001
8	0	0000000


17：
111	77	
1101	76	
11001	75	
110001	74

16：
101	67	11	吞噬残长7开头
1001	66	11	吞噬残长7开头
10001	65	10

15：
011	57	01	吞噬残长7开头的
0101	56	01	吞噬残长7开头的
01001	55	00

15：
0011	47
00101	46
001001	45