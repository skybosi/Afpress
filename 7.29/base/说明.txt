相关说明：

本程序中所有形参中输入名为in，输出out，至于实参，具体临时确定！

一，名词定义：
#残长(canc)：一个字节的数据，将首零或首一去掉后点位的长度。
#残数(cans)：一个字节的数据，将首零或首一去掉后剩余的数据位。即，残数的位数即为残长。
#缩化数：将多个残数按原文件的顺序，重新连接组合成的数据。
#元残数(meta_cans)：用来获取残数对应的原数的残数部分的数，本质是利用与位运算，与缩化数做与位运算，获得缩化数中的原数，出现在解压程序中。如：残长2的元残数对应的二进制为11，即3，3的元残数对应的二进制为111即7；它与残长的关系为cans=(1<<canc)-1。
#缩化方式选择数(chose_wayn)：首零或首一对应一位0或1存放在一个数据里(后面说的模式)，用于在解压时对调用解压函数的选择。
#模式数：对模式数进行操作的核心参数，也是解压程序的核心参数，包含缩化方式选择数，一、二残数残长！
#过余位：残数组合时，超过一个字节的剩余位数。
#位堆：残数的组合成缩化数时，并不能也不大可能完美的放在在一个字节内，肯定会(绝大部分)造成一个残数，在两个相临字节之间都保留部分。为了解决这个问题，将这些组合结果放在一个固定大小(位数)的容器里，直到合适的时候写入文件中。这个容器被称为位堆，它的大小是字节的整数倍。目的是尽可能的保证没有过余位！(可能有一个问题！)


二，文件存在形式

1，原文件：
num1 num2 num3 ... numi ...
将所有文件(不是文件夹或目录)中的内容都当做字节分解，而每个字节都对应一个数(num)，其本质上都是以二进制数存在。不管什么文件都是如此组合而成。

2，压文件：
 mode_num snum1 snum2 snum3 ... snumi ...
经过压操作后，原文件的数据将被删减成残数、重建与组合成缩化数、存放在原文件相对应的位置！为了还原，必须在某个位置(我选择放在缩化数集的前面)放置一个解析法则来操作这些新家伙，即模式数(mode_num)。用mode_num来解压缩后面存放的若干数，snum的个数由mode_num的不同值确定(s代表缩化)。这两者的组合的文件即为压文件。
 
注：压文件结构详解

大体分为两部分两部分内容，模式数+缩化数，但要注意的是他们不是各自独立分部的(或许可以考虑这样实现试试)，虽然这样更容易操作和实现。他们是有机的间隔分部的，读取一个模式数，从中获取操作的模式数的个数和解压方式方法，再作用在后面的若干缩化数！
模式数的设计
模式数的设计是整个程序的核心，他保证了对后面若干模式数的精简的还原。是实现压缩的控制部件，同时也最容易导致扩大，实现一种令人笑喷的结果——越压越大！所以他要以下特点：
#可以完美的解析其后的若干模式数——这是最基本的
#尽可能的用到每一位，最好可以实现一位多用的有效统一——更好的保证压缩效果
#


三，函数：

1，压缩部分：

del 缩化函数
ldel(左缩) 
rdel(右缩)



2，解压部分：

udel 	扩化函数
uldel	(左扩) 
urdel	(右扩)

mode 获取缩化模式函数:char *mode(char in);
作用：将模式数mode_num分解成缩化方式选择数，一缩化数残长，二缩化数残长；提供给缩化数snum，用于对snum的扩化(即解压)！
#输入(1个)：
	缩化模式数mode_num
#输出(3个)： 
	第一个被缩化数的残长one
	第二个被缩化数的残长two
	缩化方式选择数del_way_num
例：in=68 即 01 000 100 (二进制)
01	告诉	原文件有两个连续的数
第一个小于128，第一个大于128，所以分别采用del0 和 del1 。
注：del0和del1这两个函数不存在，del函数会自动处理该数，此处只是为了方便解释！其中del0表示去掉首零，del1表示去掉首一。
000(0)	告诉
第一个数的残长为0，即要么是0，要么是255
100(4)	告诉
第一个数的残长为4，即在8~15或240~247之间