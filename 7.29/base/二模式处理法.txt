本算法试图将1个字节(8位)的所有数据按残长分为8堆，并给每一堆一个唯一标志位串，用于识别该堆的数据！考虑到残数的长度不一，则必须采用不同的位串标记！最终出现原模式1的情况(残长7增大一位，残长6保持原长，其他均缩小一位)，为此设计以下方法弱化残长7的影响！
重新设计的方案，采用双模式处理不同情况的残长堆，为了弱化残长7的情况，引入锁机制，通过锁机制的开闭来选择模式的切换！开启意味着遇到残长7，关闭说明残长7中断！
模式分为主模式和辅模式，主模式又称缩化模式，对文件起到压缩效果的模式；辅模式又称弱化模式，为了应对残长7的情况而设计，基本不会缩小文件大小！但不会增大！
对于该程序的设计有以下三点优势：
1，无文件格式，传播形式限制
2，可以实现多次压缩，而且每次都能减小
3，即使文件不完整也可以解压部分内容

可能出现的悖论式难题：
由优势2可知，随着压缩次数增加，则似乎总有压缩到0字节的状态。这是不可能也不应该的事！
解决该问题的一个猜想：
该算法可以实现可持续压缩，但压缩的效率越来越低，最终趋向于一个固定值！它是一个有界函数，永远不能越过这个界限！


缩化模式1.0 (缩化主模式)
11    6
10    5
01    4
001   3
0001  2
00001 1
00000 0

缩化模式1.1 (缩化主模式)
1      6
01     5
001    4
0001   3
00001  2
000001 1
000000 0

弱化模式2 (专门弱化处理残长7的情况的辅模式)
1       7
01      6
001     5
0001    4
00001   3
000001  2
0000001 1
0000000 0

以下是所有情况表1.0：[n] 表示n位的位串

  编码     	 位长 锁机制
11 1[6][7]       16   1
11 01[6][6]      16
11 001[6][5]     16
11 0001[6][4]    16
11 00001[6][3]   16
11 000001[6][2]  16
11 0000001[6][1] 16
11 0000000[6][0] 16

10 1[5][7]       15   1
10 01[5][6]      15
10 001[5][5]     15
10 0001[5][4]    15
10 00001[5][3]   15
10 000001[5][2]  15
10 0000001[5][1] 15
10 0000000[5][0] 15

01 1[4][7]       14   1
01 01[4][6]      14
01 001[4][5]     14
01 0001[4][4]    14
01 00001[4][3]   14
01 000001[4][2]  14
01 0000001[4][1] 14
01 0000000[4][0] 14

001 1[3][7]       14  1
001 01[3][6]      14
001 001[3][5]     14
001 0001[3][4]    14
001 00001[3][3]   14
001 000001[3][2]  14
001 0000001[3][1] 14
001 0000000[3][0] 14

0001 1[2][7]       14 1
0001 01[2][6]      14
0001 001[2][5]     14
0001 0001[2][4]    14
0001 00001[2][3]   14
0001 000001[2][2]  14
0001 0000001[2][1] 14
0001 0000000[2][0] 14

00001 1[1][7]       14 1
00001 01[1][6]      14
00001 001[1][5]     14
00001 0001[1][4]    14
00001 00001[1][3]   14
00001 000001[1][2]  14
00001 0000001[1][1] 14
00001 0000000[1][0] 14

00000 1[0][7]       14 1
00000 01[0][6]      14
00000 001[0][5]     14
00000 0001[0][4]    14
00000 00001[0][3]   14
00000 000001[0][2]  14
00000 0000001[0][1] 14
00000 0000000[0][0] 14

以下是所有情况表1.1：[n] 表示n位的位串

  编码     位长 锁机制
1 1[6][7]       15   1
1 01[6][6]      15
1 001[6][5]     15
1 0001[6][4]    15
1 00001[6][3]   15
1 000001[6][2]  15
1 0000001[6][1] 15
1 0000000[6][0] 15

01 1[5][7]       15   1
01 01[5][6]      15
01 001[5][5]     15
01 0001[5][4]    15
01 00001[5][3]   15
01 000001[5][2]  15
01 0000001[5][1] 15
01 0000000[5][0] 15

001 1[4][7]       15   1
001 01[4][6]      15
001 001[4][5]     15
001 0001[4][4]    15
001 00001[4][3]   15
001 000001[4][2]  15
001 0000001[4][1] 15
001 0000000[4][0] 15

0001 1[3][7]       15  1
0001 01[3][6]      15
0001 001[3][5]     15
0001 0001[3][4]    15
0001 00001[3][3]   15
0001 000001[3][2]  15
0001 0000001[3][1] 15
0001 0000000[3][0] 15

00001 1[2][7]       15 1
00001 01[2][6]      15
00001 001[2][5]     15
00001 0001[2][4]    15
00001 00001[2][3]   15
00001 000001[2][2]  15
00001 0000001[2][1] 15
00001 0000000[2][0] 15

000001 1[1][7]       15 1
000001 01[1][6]      15
000001 001[1][5]     15
000001 0001[1][4]    15
000001 00001[1][3]   15
000001 000001[1][2]  15
000001 0000001[1][1] 15
000001 0000000[1][0] 14

000000 1[0][7]       15 1
000000 01[0][6]      15
000000 001[0][5]     15
000000 0001[0][4]    15
000000 00001[0][3]   15
000000 000001[0][2]  15
000000 0000001[0][1] 15
000000 0000000[0][0] 15


关闭锁机制的情况表2：{} 表示锁机制前区间

{}0010     [5]
{}00010    [4]
{}000010   [3]
{}0000010  [2]
{}00000010 [1]
{}00000000 [0]


继续锁机制的情况表3：{} 表示锁机制前区间

{}0011     [5][7]
{}00011    [4][7]
{}000011   [3][7]
{}0000011  [2][7]
{}00000011 [1][7]
{}00000001 [0][7]

假设：文件的首字符不是残长7序列的一个，故，不可能出现在一次锁机制的开启和关闭的字符串中有残长7开头的情况！这种不可能要绝对性的！

锁机制处理：由于残长7的出现且占比过半，而残长7的效果会导致压缩过程中的增加一位(如果采用模式1.1可以实现头尾抵消作用)，为了弱化这种不应该的情况！特地引入一种弱化模式2，起作用时会导致所有残长的字符能保持8位原长(见模式2)，所以在出现残长7时(通过一个固定的锁机制识别码位来识别)，自动开启锁机制，在必要且恰当的位置关闭它！就能保证在此范围的所有字符被弱化到原长！而在未开启时采用模式1来处理所有数据，达到缩化效果！

开启条件：首次出现残长7的时候立即开启
关闭条件：开启后，首次出现残长小于6的字符A的情况，且下一个字符的残长小于7时，处理完A后立即关闭
所以区间内，只有残长6和7的组合，头残长小于7，尾残长小于6

由以上情况表1(包括1.0，1.1两种情况)可以知道，锁机制开启(状态1)出现在残长7，而其特点是，在唯一标志位串除去模式1的部分，首位是1，而这就是锁机制开识别码位，而如果是0则按其他情况操作，且不开启锁机制！

由以上情况表2可以知道，锁机制关闭(状态0)出现在首次出现残长小于6的情况(包括未开启锁机制)，在唯一标志位串出去模式2的部分，首位是0，而这就是锁机制闭识别码位，而如果是1则(继续)开启锁机制，即按情况表3操作！

文件处理方式：
锁机制开启关闭区间内，单字符读取处理，按模式2的残长6和7处理操作；此外为双字符处理，且按照情况表1解析操作！

注意：如果在未首次出现残长7前，即锁机制为启动前，就出现残长小于6的情况！此时应认为是一种特殊情况，即夭折了！而这种情况没法有效处理掉，最好的效果是大小不变！
这个问题是这个设计方案的巨大漏洞，也必然预示着该方案的基本终结！  ：(